name: Simple CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  # ===================
  # CONTINUOUS INTEGRATION
  # ===================
  test:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: pdo, pdo_mysql, mysqli

      - name: 🔍 PHP Syntax Check
        run: |
          find . -name "*.php" -exec php -l {} \;

      - name: 🐳 Build Docker Image
        run: |
          docker build -t school-app .

      - name: 🧪 Test Docker Container
        run: |
          # Start test database
          docker run -d --name test-db \
            -e MYSQL_ROOT_PASSWORD=testpass \
            -e MYSQL_DATABASE=laravel_myschools \
            -e MYSQL_USER=test_user \
            -e MYSQL_PASSWORD=testpass \
            mysql:8.0

          # Wait for database
          sleep 30

          # Start web container
          docker run -d --name test-web \
            --link test-db:db \
            -e DB_HOST=test-db \
            -e DB_NAME=laravel_myschools \
            -e DB_USER=test_user \
            -e DB_PASSWORD=testpass \
            -p 8080:80 \
            school-app

          # Wait for web container
          sleep 20

          # Test if it's working
          curl -f http://localhost:8080/ || echo "Web test failed"

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker stop test-web test-db || true
          docker rm test-web test-db || true

  # ===================
  # CONTINUOUS DEPLOYMENT
  # ===================
  deploy:
    name: 🚀 Deploy to Server
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Create deployment package
        run: |
          echo "Creating deployment package..."

          # Method 1: Using tar with warning suppression
          tar -czf app.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='*.log' \
            --warning=no-file-changed \
            . || [ $? -eq 1 ]

          # Verify the archive was created
          if [ -f "app.tar.gz" ]; then
            ls -la app.tar.gz
            echo "✅ Package created successfully"
          else
            echo "❌ Package creation failed"
            exit 1
          fi

      - name: 📤 Upload to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USERNAME }}
          password: ${{ secrets.AZURE_PASSWORD }}
          source: 'app.tar.gz'
          target: '/tmp/'

      - name: 🚀 Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USERNAME }}
          password: ${{ secrets.AZURE_PASSWORD }}
          script: |
            # Go to app directory
            cd ~/apps/school || mkdir -p ~/apps/school && cd ~/apps/school

            # Backup current app
            if [ -f "docker-compose.yml" ]; then
              echo "Backing up current app..."
              docker-compose down || true
              tar -czf ~/backup-$(date +%Y%m%d_%H%M%S).tar.gz . 2>/dev/null || true
            fi

            # Extract new app
            echo "Extracting new app..."
            rm -rf ./*
            tar -xzf /tmp/app.tar.gz
            rm /tmp/app.tar.gz

            # Start new app
            echo "Starting new app..."
            docker-compose up --build -d

            # Wait and check
            sleep 45
            docker-compose ps

            # Enhanced health check
            echo "Running health check..."
            HEALTH_CHECK_PASSED=false
            for i in {1..10}; do
              if curl -f http://localhost:8082/ > /dev/null 2>&1; then
                echo "✅ Deployment successful!"
                echo "🌐 App running at: http://70.153.137.107:8082"
                echo "🗃️ phpMyAdmin: http://70.153.137.107:8083"
                HEALTH_CHECK_PASSED=true
                break
              fi
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            done

            if [ "$HEALTH_CHECK_PASSED" = false ]; then
              echo "❌ Deployment failed after 10 attempts!"
              echo "📋 Container logs:"
              docker-compose logs --tail=50
              exit 1
            fi

      - name: 📊 Deployment result
        if: always()
        run: |
          echo "Deployment completed at $(date)"
          echo "Status: ${{ job.status }}"
