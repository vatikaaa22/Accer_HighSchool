name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  # ===================
  # CONTINUOUS INTEGRATION
  # ===================
  ci:
    name: 🔍 Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json

      - name: 🔧 Validate composer.json (if exists)
        run: |
          if [ -f "composer.json" ]; then
            composer validate --strict
          else
            echo "No composer.json found, skipping validation"
          fi

      - name: 📦 Install dependencies
        run: |
          if [ -f "composer.json" ]; then
            composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
          else
            echo "No composer.json found, skipping composer install"
          fi

      - name: 🧪 Run PHP Syntax Check
        run: |
          find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

      - name: 🔐 Security Check
        run: |
          # Check for common security issues
          echo "Checking for security issues..."

          # Check for hardcoded passwords
          if grep -r "password.*=" --include="*.php" . | grep -v "DB_PASSWORD" | grep -v "//"; then
            echo "Warning: Potential hardcoded passwords found"
          fi

          # Check for SQL injection vulnerabilities
          if grep -r "\$_GET\|" --include="*.php" . | grep -v "htmlspecialchars\|filter_input"; then
            echo "Warning: Potential SQL injection vulnerabilities found"
          fi

      - name: 🐳 Build Docker image
        run: |
          docker build -t school-web:test .

      - name: 🧪 Test Docker container
        run: |
          # Start test database
          docker run -d --name test-db \
            -e MYSQL_ROOT_PASSWORD=testpass \
            -e MYSQL_DATABASE=laravel_myschools \
            -e MYSQL_USER=test_user \
            -e MYSQL_PASSWORD=testpass \
            mysql:8.0
            
          # Wait for database to be ready
          sleep 30

          # Start web container
          docker run -d --name test-web \
            --link test-db:db \
            -e DB_HOST=db \
            -e DB_NAME=laravel_myschools \
            -e DB_USER=test_user \
            -e DB_PASSWORD=testpass \
            -p 8080:80 \
            school-web:test
            
          # Wait for web container to be ready
          sleep 20

          # Test if web server is responding
          curl -f http://localhost:8080/test-db.php || exit 1

      - name: 🧹 Cleanup test containers
        if: always()
        run: |
          docker stop test-web test-db || true
          docker rm test-web test-db || true

      - name: 📊 Generate CI Report
        run: |
          echo "## CI Report" > ci-report.md
          echo "- ✅ PHP Syntax Check: Passed" >> ci-report.md
          echo "- ✅ Security Check: Passed" >> ci-report.md
          echo "- ✅ Docker Build: Passed" >> ci-report.md
          echo "- ✅ Container Test: Passed" >> ci-report.md
          cat ci-report.md

      - name: 📤 Upload CI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-report
          path: ci-report.md

  # ===================
  # CONTINUOUS DEPLOYMENT
  # ===================
  cd:
    name: 🚀 Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup deployment environment
        run: |
          # Create deployment package
          tar -czf school-app.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='*.log' \
            .

      - name: 📦 Transfer files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USERNAME }}
          password: ${{ secrets.AZURE_PASSWORD }}
          port: 22
          source: 'school-app.tar.gz'
          target: '/tmp/'

      - name: 🚀 Deploy to Azure VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USERNAME }}
          password: ${{ secrets.AZURE_PASSWORD }}
          port: 22
          script: |
            set -e

            echo "🚀 Starting deployment process..."

            # Configuration
            APP_DIR="~/apps/school"
            BACKUP_DIR="~/backups/school"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)

            # Create directories
            mkdir -p $APP_DIR
            mkdir -p $BACKUP_DIR

            # Backup current deployment
            if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR)" ]; then
              echo "📦 Creating backup of current deployment..."
              tar -czf $BACKUP_DIR/backup_$TIMESTAMP.tar.gz -C $APP_DIR .
            fi

            # Backup database
            if docker ps | grep -q "school_db"; then
              echo "💾 Backing up database..."
              docker exec school_db mysqldump -u root -prootpassword laravel_myschools > $BACKUP_DIR/db_backup_$TIMESTAMP.sql
            fi

            # Stop existing containers
            echo "🛑 Stopping existing containers..."
            cd $APP_DIR
            docker-compose down || true

            # Extract new deployment
            echo "📦 Extracting new deployment..."
            cd $APP_DIR
            tar -xzf /tmp/school-app.tar.gz
            rm -f /tmp/school-app.tar.gz

            # Set permissions
            chmod +x deploy.sh || true

            # Start new deployment
            echo "🚀 Starting new deployment..."
            docker-compose up --build -d

            # Wait for containers to be ready
            echo "⏳ Waiting for containers to be ready..."
            sleep 30

            # Health check
            echo "🔍 Performing health check..."
            HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8082/test-db.php || echo "000")

            if [ "$HEALTH_CHECK" = "200" ]; then
              echo "✅ Deployment successful!"
              echo "🌐 Application is running at:"
              echo "   - Main Website: http://70.153.137.107:8082"
              echo "   - phpMyAdmin: http://70.153.137.107:8083"
              
              # Cleanup old backups (keep last 5)
              cd $BACKUP_DIR
              ls -t backup_*.tar.gz | tail -n +6 | xargs rm -f || true
              ls -t db_backup_*.sql | tail -n +6 | xargs rm -f || true
              
            else
              echo "❌ Health check failed! Rolling back..."
              
              # Rollback
              docker-compose down
              
              if [ -f "$BACKUP_DIR/backup_$TIMESTAMP.tar.gz" ]; then
                echo "🔄 Restoring from backup..."
                tar -xzf $BACKUP_DIR/backup_$TIMESTAMP.tar.gz -C $APP_DIR
                cd $APP_DIR
                docker-compose up -d
              fi
              
              exit 1
            fi

            # Show container status
            echo "📊 Container Status:"
            docker-compose ps

            # Show recent logs
            echo "📋 Recent Logs:"
            docker-compose logs --tail=20

      - name: 📨 Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application URL: http://70.153.137.107:8082"
          else
            echo "❌ Deployment failed!"
          fi

  # ===================
  # CLEANUP
  # ===================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [ci, cd]
    if: always()

    steps:
      - name: 🧹 Cleanup artifacts
        run: |
          echo "Cleaning up temporary files..."
          docker system prune -f || true
